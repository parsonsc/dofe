
var scriptPath = function () {
    var scripts = document.getElementsByTagName('SCRIPT');
    var path = '';
    if(scripts && scripts.length>0) {
        for(var i in scripts) {
            if(scripts[i].src && scripts[i].src.match(/\/uplflickr\.js/)) {
                var matcha  = scripts[i].src.match(/(.*)\/uplflickr\.js/gmi);
                path = matcha[0].replace('js/uplflickr.js', '');
                break;
            }
        }
    }
    return path;
};   

function updateURLParameter(url, param, paramVal){
    var newAdditionalURL = "";
    var tempArray = url.split("?");
    var baseURL = tempArray[0];
    var additionalURL = tempArray[1];
    var temp = "";
    if (additionalURL) {
        tempArray = additionalURL.split("&");
        for (i=0; i<tempArray.length; i++){
            if(tempArray[i].split('=')[0] != param){
                newAdditionalURL += temp + tempArray[i];
                temp = "&";
            }
        }
    }
    var rows_txt = '';
    if (paramVal != '') rows_txt = temp + "" + param + "=" + paramVal;
    return baseURL + "?" + newAdditionalURL + rows_txt;
} 

function uploadDone(){
    jQuery('.loadingGif').remove();
    var img = jQuery('#upload_target', window.parent.document).contents().find('body').html();
    if (img.length > 0){
        // proof content if there is an error
        if(img.indexOf("uperror") != -1 || img.indexOf("uploads/big") == -1){
            jQuery('.noimg-loaded', window.parent.document).show();
            if (img.indexOf("uperror") != -1){
                jQuery('.noimg-loaded p.error', window.parent.document).html( img.find('p').text() );
                jQuery('#uploadFile', window.parent.document).val();
            }
            else{
                jQuery('.noimg-loaded p.error', window.parent.document).html('something has gone wrong');
                jQuery('#uploadFile', window.parent.document).val();
            }
            jQuery('#upload_thumb', window.parent.document).hide();// hide the generate button
            jQuery('.notice', window.parent.document).hide();
            jQuery('#notice', window.parent.document).html(img).fadeIn();//show error message
        }
        else {
            jQuery('.noimg-loaded', window.parent.document).hide();
            // save the image source
            jQuery('.img_src', window.parent.document).val(img);
            // load to preview image
            img_id = 'big';
            
            jQuery('.img-loaded', window.parent.document).show();
            //alert(scriptPath()+img);
            // set selection image
            jQuery('.cropimage', window.parent.document).attr("src",scriptPath()+img).fadeIn();

            jQuery('#ajaxafgflickr .x').val(0);
            jQuery('#ajaxafgflickr .y').val(0);
            jQuery('#ajaxafgflickr .w').val(530 * 3);
            jQuery('#ajaxafgflickr .h').val(530 * 3);
            
            if (jQuery('.img-loaded').width() < 530){
                //var scale = ($('.img-loaded').width() / 530) * 100;
                var image = jQuery('.cropimage'),
                    cropwidth = jQuery('.img-loaded').width(),
                    cropheight = jQuery('.img-loaded').width(),
                    results = jQuery('#ajaxafgflickr'),
                    x       = jQuery('.x', results),
                    y       = jQuery('.y', results),
                    w       = jQuery('.w', results),
                    h       = jQuery('.h', results);
                image.cropbox( { width: cropwidth, height: cropheight, showControls: 'always' } )
                    .on('cropbox', function( event, results, img ) {
                      jQuery('#ajaxafgflickr .x').val( results.cropX );
                      jQuery('#ajaxafgflickr .y').val( results.cropY );              
                      jQuery('#ajaxafgflickr .w').val( results.cropW );
                      jQuery('#ajaxafgflickr .h').val( results.cropH );
                    });
            }
            else{
                var image = jQuery('.cropimage'),
                    cropwidth = image.attr('cropwidth'),
                    cropheight = image.attr('cropheight'),
                    results = jQuery('#ajaxafgflickr'),
                    x       = jQuery('.x', results),
                    y       = jQuery('.y', results),
                    w       = jQuery('.w', results),
                    h       = jQuery('.h', results);
                image.cropbox( { width: cropwidth, height: cropheight, showControls: 'always' } )
                    .on('cropbox', function( event, results, img ) {
                      jQuery('#ajaxafgflickr .x').val( results.cropX );
                      jQuery('#ajaxafgflickr .y').val( results.cropY );              
                      jQuery('#ajaxafgflickr .w').val( results.cropW );
                      jQuery('#ajaxafgflickr .h').val( results.cropH );
                    });
            }
            
            //alert('should be shown');
            jQuery('.notice', window.parent.document).fadeOut();
        }
    }
    else{
        jQuery('.noimg-loaded p.error', window.parent.document).html('We\'re sorry but you\'re unable to use this photo. Please check that your file is either a JPEG or a GIF and that it is no larger than 6MB');
        jQuery('.noimg-loaded', window.parent.document).show();
        jQuery('#uploadFile', window.parent.document).val();
    }
}


var EXIF = (function() {

    var debug = false;

    var ExifTags = {

        // version tags
        0x9000 : "ExifVersion",             // EXIF version
        0xA000 : "FlashpixVersion",         // Flashpix format version

        // colorspace tags
        0xA001 : "ColorSpace",              // Color space information tag

        // image configuration
        0xA002 : "PixelXDimension",         // Valid width of meaningful image
        0xA003 : "PixelYDimension",         // Valid height of meaningful image
        0x9101 : "ComponentsConfiguration", // Information about channels
        0x9102 : "CompressedBitsPerPixel",  // Compressed bits per pixel

        // user information
        0x927C : "MakerNote",               // Any desired information written by the manufacturer
        0x9286 : "UserComment",             // Comments by user

        // related file
        0xA004 : "RelatedSoundFile",        // Name of related sound file

        // date and time
        0x9003 : "DateTimeOriginal",        // Date and time when the original image was generated
        0x9004 : "DateTimeDigitized",       // Date and time when the image was stored digitally
        0x9290 : "SubsecTime",              // Fractions of seconds for DateTime
        0x9291 : "SubsecTimeOriginal",      // Fractions of seconds for DateTimeOriginal
        0x9292 : "SubsecTimeDigitized",     // Fractions of seconds for DateTimeDigitized

        // picture-taking conditions
        0x829A : "ExposureTime",            // Exposure time (in seconds)
        0x829D : "FNumber",                 // F number
        0x8822 : "ExposureProgram",         // Exposure program
        0x8824 : "SpectralSensitivity",     // Spectral sensitivity
        0x8827 : "ISOSpeedRatings",         // ISO speed rating
        0x8828 : "OECF",                    // Optoelectric conversion factor
        0x9201 : "ShutterSpeedValue",       // Shutter speed
        0x9202 : "ApertureValue",           // Lens aperture
        0x9203 : "BrightnessValue",         // Value of brightness
        0x9204 : "ExposureBias",            // Exposure bias
        0x9205 : "MaxApertureValue",        // Smallest F number of lens
        0x9206 : "SubjectDistance",         // Distance to subject in meters
        0x9207 : "MeteringMode",            // Metering mode
        0x9208 : "LightSource",             // Kind of light source
        0x9209 : "Flash",                   // Flash status
        0x9214 : "SubjectArea",             // Location and area of main subject
        0x920A : "FocalLength",             // Focal length of the lens in mm
        0xA20B : "FlashEnergy",             // Strobe energy in BCPS
        0xA20C : "SpatialFrequencyResponse",    // 
        0xA20E : "FocalPlaneXResolution",   // Number of pixels in width direction per FocalPlaneResolutionUnit
        0xA20F : "FocalPlaneYResolution",   // Number of pixels in height direction per FocalPlaneResolutionUnit
        0xA210 : "FocalPlaneResolutionUnit",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution
        0xA214 : "SubjectLocation",         // Location of subject in image
        0xA215 : "ExposureIndex",           // Exposure index selected on camera
        0xA217 : "SensingMethod",           // Image sensor type
        0xA300 : "FileSource",              // Image source (3 == DSC)
        0xA301 : "SceneType",               // Scene type (1 == directly photographed)
        0xA302 : "CFAPattern",              // Color filter array geometric pattern
        0xA401 : "CustomRendered",          // Special processing
        0xA402 : "ExposureMode",            // Exposure mode
        0xA403 : "WhiteBalance",            // 1 = auto white balance, 2 = manual
        0xA404 : "DigitalZoomRation",       // Digital zoom ratio
        0xA405 : "FocalLengthIn35mmFilm",   // Equivalent foacl length assuming 35mm film camera (in mm)
        0xA406 : "SceneCaptureType",        // Type of scene
        0xA407 : "GainControl",             // Degree of overall image gain adjustment
        0xA408 : "Contrast",                // Direction of contrast processing applied by camera
        0xA409 : "Saturation",              // Direction of saturation processing applied by camera
        0xA40A : "Sharpness",               // Direction of sharpness processing applied by camera
        0xA40B : "DeviceSettingDescription",    // 
        0xA40C : "SubjectDistanceRange",    // Distance to subject

        // other tags
        0xA005 : "InteroperabilityIFDPointer",
        0xA420 : "ImageUniqueID"            // Identifier assigned uniquely to each image
    };

    var TiffTags = {
        0x0100 : "ImageWidth",
        0x0101 : "ImageHeight",
        0x8769 : "ExifIFDPointer",
        0x8825 : "GPSInfoIFDPointer",
        0xA005 : "InteroperabilityIFDPointer",
        0x0102 : "BitsPerSample",
        0x0103 : "Compression",
        0x0106 : "PhotometricInterpretation",
        0x0112 : "Orientation",
        0x0115 : "SamplesPerPixel",
        0x011C : "PlanarConfiguration",
        0x0212 : "YCbCrSubSampling",
        0x0213 : "YCbCrPositioning",
        0x011A : "XResolution",
        0x011B : "YResolution",
        0x0128 : "ResolutionUnit",
        0x0111 : "StripOffsets",
        0x0116 : "RowsPerStrip",
        0x0117 : "StripByteCounts",
        0x0201 : "JPEGInterchangeFormat",
        0x0202 : "JPEGInterchangeFormatLength",
        0x012D : "TransferFunction",
        0x013E : "WhitePoint",
        0x013F : "PrimaryChromaticities",
        0x0211 : "YCbCrCoefficients",
        0x0214 : "ReferenceBlackWhite",
        0x0132 : "DateTime",
        0x010E : "ImageDescription",
        0x010F : "Make",
        0x0110 : "Model",
        0x0131 : "Software",
        0x013B : "Artist",
        0x8298 : "Copyright"
    };

    var GPSTags = {
        0x0000 : "GPSVersionID",
        0x0001 : "GPSLatitudeRef",
        0x0002 : "GPSLatitude",
        0x0003 : "GPSLongitudeRef",
        0x0004 : "GPSLongitude",
        0x0005 : "GPSAltitudeRef",
        0x0006 : "GPSAltitude",
        0x0007 : "GPSTimeStamp",
        0x0008 : "GPSSatellites",
        0x0009 : "GPSStatus",
        0x000A : "GPSMeasureMode",
        0x000B : "GPSDOP",
        0x000C : "GPSSpeedRef",
        0x000D : "GPSSpeed",
        0x000E : "GPSTrackRef",
        0x000F : "GPSTrack",
        0x0010 : "GPSImgDirectionRef",
        0x0011 : "GPSImgDirection",
        0x0012 : "GPSMapDatum",
        0x0013 : "GPSDestLatitudeRef",
        0x0014 : "GPSDestLatitude",
        0x0015 : "GPSDestLongitudeRef",
        0x0016 : "GPSDestLongitude",
        0x0017 : "GPSDestBearingRef",
        0x0018 : "GPSDestBearing",
        0x0019 : "GPSDestDistanceRef",
        0x001A : "GPSDestDistance",
        0x001B : "GPSProcessingMethod",
        0x001C : "GPSAreaInformation",
        0x001D : "GPSDateStamp",
        0x001E : "GPSDifferential"
    };

    var StringValues = {
        ExposureProgram : {
            0 : "Not defined",
            1 : "Manual",
            2 : "Normal program",
            3 : "Aperture priority",
            4 : "Shutter priority",
            5 : "Creative program",
            6 : "Action program",
            7 : "Portrait mode",
            8 : "Landscape mode"
        },
        MeteringMode : {
            0 : "Unknown",
            1 : "Average",
            2 : "CenterWeightedAverage",
            3 : "Spot",
            4 : "MultiSpot",
            5 : "Pattern",
            6 : "Partial",
            255 : "Other"
        },
        LightSource : {
            0 : "Unknown",
            1 : "Daylight",
            2 : "Fluorescent",
            3 : "Tungsten (incandescent light)",
            4 : "Flash",
            9 : "Fine weather",
            10 : "Cloudy weather",
            11 : "Shade",
            12 : "Daylight fluorescent (D 5700 - 7100K)",
            13 : "Day white fluorescent (N 4600 - 5400K)",
            14 : "Cool white fluorescent (W 3900 - 4500K)",
            15 : "White fluorescent (WW 3200 - 3700K)",
            17 : "Standard light A",
            18 : "Standard light B",
            19 : "Standard light C",
            20 : "D55",
            21 : "D65",
            22 : "D75",
            23 : "D50",
            24 : "ISO studio tungsten",
            255 : "Other"
        },
        Flash : {
            0x0000 : "Flash did not fire",
            0x0001 : "Flash fired",
            0x0005 : "Strobe return light not detected",
            0x0007 : "Strobe return light detected",
            0x0009 : "Flash fired, compulsory flash mode",
            0x000D : "Flash fired, compulsory flash mode, return light not detected",
            0x000F : "Flash fired, compulsory flash mode, return light detected",
            0x0010 : "Flash did not fire, compulsory flash mode",
            0x0018 : "Flash did not fire, auto mode",
            0x0019 : "Flash fired, auto mode",
            0x001D : "Flash fired, auto mode, return light not detected",
            0x001F : "Flash fired, auto mode, return light detected",
            0x0020 : "No flash function",
            0x0041 : "Flash fired, red-eye reduction mode",
            0x0045 : "Flash fired, red-eye reduction mode, return light not detected",
            0x0047 : "Flash fired, red-eye reduction mode, return light detected",
            0x0049 : "Flash fired, compulsory flash mode, red-eye reduction mode",
            0x004D : "Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",
            0x004F : "Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",
            0x0059 : "Flash fired, auto mode, red-eye reduction mode",
            0x005D : "Flash fired, auto mode, return light not detected, red-eye reduction mode",
            0x005F : "Flash fired, auto mode, return light detected, red-eye reduction mode"
        },
        SensingMethod : {
            1 : "Not defined",
            2 : "One-chip color area sensor",
            3 : "Two-chip color area sensor",
            4 : "Three-chip color area sensor",
            5 : "Color sequential area sensor",
            7 : "Trilinear sensor",
            8 : "Color sequential linear sensor"
        },
        SceneCaptureType : {
            0 : "Standard",
            1 : "Landscape",
            2 : "Portrait",
            3 : "Night scene"
        },
        SceneType : {
            1 : "Directly photographed"
        },
        CustomRendered : {
            0 : "Normal process",
            1 : "Custom process"
        },
        WhiteBalance : {
            0 : "Auto white balance",
            1 : "Manual white balance"
        },
        GainControl : {
            0 : "None",
            1 : "Low gain up",
            2 : "High gain up",
            3 : "Low gain down",
            4 : "High gain down"
        },
        Contrast : {
            0 : "Normal",
            1 : "Soft",
            2 : "Hard"
        },
        Saturation : {
            0 : "Normal",
            1 : "Low saturation",
            2 : "High saturation"
        },
        Sharpness : {
            0 : "Normal",
            1 : "Soft",
            2 : "Hard"
        },
        SubjectDistanceRange : {
            0 : "Unknown",
            1 : "Macro",
            2 : "Close view",
            3 : "Distant view"
        },
        FileSource : {
            3 : "DSC"
        },

        Components : {
            0 : "",
            1 : "Y",
            2 : "Cb",
            3 : "Cr",
            4 : "R",
            5 : "G",
            6 : "B"
        }
    };

    function addEvent(element, event, handler) {
        if (element.addEventListener) { 
            element.addEventListener(event, handler, false); 
        } else if (element.attachEvent) { 
            element.attachEvent("on" + event, handler); 
        }
    }

    function imageHasData(img) {
        return !!(img.exifdata);
    }


    function base64ToArrayBuffer(base64, contentType) {
        contentType = contentType || base64.match(/^data\:([^\;]+)\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'
        base64 = base64.replace(/^data\:([^\;]+)\;base64,/gmi, '');
        var binary = atob(base64);
        var len = binary.length;
        var buffer = new ArrayBuffer(len);
        var view = new Uint8Array(buffer);
        for (var i = 0; i < len; i++) {
            view[i] = binary.charCodeAt(i);
        }
        return buffer;
    }

    function objectURLToBlob(url, callback) {
        var http = new XMLHttpRequest();
        http.open("GET", url, true);
        http.responseType = "blob";
        http.onload = function(e) {
            if (this.status == 200 || this.status === 0) {
                callback(this.response);
            }
        };
        http.send();
    }

    function getImageData(img, callback) {
        function handleBinaryFile(binFile) {
            var data = findEXIFinJPEG(binFile);
            var iptcdata = findIPTCinJPEG(binFile);
            img.exifdata = data || {};
            img.iptcdata = iptcdata || {};
            if (callback) {
                callback.call(img);
            }
        }

        if (img instanceof Image || img instanceof HTMLImageElement) {
            if (/^data\:/i.test(img.src)) { // Data URI
                var arrayBuffer = base64ToArrayBuffer(img.src);
                handleBinaryFile(arrayBuffer);

            } else if (/^blob\:/i.test(img.src)) { // Object URL
                var fileReader = new FileReader();
                fileReader.onload = function(e) {
                    handleBinaryFile(e.target.result);
                };
                objectURLToBlob(img.src, function (blob) {
                    fileReader.readAsArrayBuffer(blob);
                });
            } else {
                var http = new XMLHttpRequest();
                http.onload = function() {
                    if (http.status == "200") {
                        handleBinaryFile(http.response);
                    } else {
                        throw "Could not load image";
                    }
                    http = null;
                };
                http.open("GET", img.src, true);
                http.responseType = "arraybuffer";
                http.send(null);
            }
        } else if (window.FileReader && (img instanceof window.Blob || img instanceof window.File)) {
            var fileReader = new FileReader();
            fileReader.onload = function(e) {
                if (debug) console.log("Got file of length " + e.target.result.byteLength);
                handleBinaryFile(e.target.result);
            };

            fileReader.readAsArrayBuffer(img);
        }
    }

    function findEXIFinJPEG(file) {
        var dataView = new DataView(file);
        
        if (debug) console.log("Got file of length " + file.byteLength);
        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
            if (debug) console.log("Not a valid JPEG");
            return false; // not a valid jpeg
        }

        var offset = 2,
            length = file.byteLength,
            marker;

        while (offset < length) {
            if (dataView.getUint8(offset) != 0xFF) {
                if (debug) console.log("Not a valid marker at offset " + offset + ", found: " + dataView.getUint8(offset));
                return false; // not a valid marker, something is wrong
            }

            marker = dataView.getUint8(offset + 1);
            if (debug) console.log(marker);

            // we could implement handling for other markers here, 
            // but we're only looking for 0xFFE1 for EXIF data

            if (marker == 225) {
                if (debug) console.log("Found 0xFFE1 marker");
                
                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);
                
                // offset += 2 + file.getShortAt(offset+2, true);

            } else {
                offset += 2 + dataView.getUint16(offset+2);
            }

        }

    }
    
    function findIPTCinJPEG(file) {
        var dataView = new DataView(file);
        
        if (debug) console.log("Got file of length " + file.byteLength);
        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
            if (debug) console.log("Not a valid JPEG");
            return false; // not a valid jpeg
        }
        
        var offset = 2,
            length = file.byteLength;
        
        
        var isFieldSegmentStart = function(dataView, offset){
            return (
                dataView.getUint8(offset) === 0x38 &&
                dataView.getUint8(offset+1) === 0x42 &&
                dataView.getUint8(offset+2) === 0x49 &&
                dataView.getUint8(offset+3) === 0x4D &&
                dataView.getUint8(offset+4) === 0x04 &&
                dataView.getUint8(offset+5) === 0x04
            );
        };
        
        while (offset < length) {
        
            if ( isFieldSegmentStart(dataView, offset )){
            
                // Get the length of the name header (which is padded to an even number of bytes)
                var nameHeaderLength = dataView.getUint8(offset+7);
                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;
                // Check for pre photoshop 6 format
                if(nameHeaderLength === 0) {
                    // Always 4 
                    nameHeaderLength = 4;
                }
            
                var startOffset = offset + 8 + nameHeaderLength;
                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);
            
                return readIPTCData(file, startOffset, sectionLength);
            
                break;
        
            }
        
        
            // Not the marker, continue searching
            offset++;

        }

    }
    var IptcFieldMap = {
        0x78 : 'caption',
        0x6E : 'credit',
        0x19 : 'keywords',
        0x37 : 'dateCreated',
        0x50 : 'byline',
        0x55 : 'bylineTitle',
        0x7A : 'captionWriter',
        0x69 : 'headline',
        0x74 : 'copyright',
        0x0F : 'category'
    };
    function readIPTCData(file, startOffset, sectionLength){
        var dataView = new DataView(file);
        var data = {};
        var fieldValue, fieldName, dataSize, segmentType, segmentSize;
        var segmentStartPos = startOffset;
        while(segmentStartPos < startOffset+sectionLength) {
            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){
                segmentType = dataView.getUint8(segmentStartPos+2);
                if(segmentType in IptcFieldMap) {
                    dataSize = dataView.getInt16(segmentStartPos+3);
                    segmentSize = dataSize + 5;
                    fieldName = IptcFieldMap[segmentType];
                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);
                    // Check if we already stored a value with this name
                    if(data.hasOwnProperty(fieldName)) {
                        // Value already stored with this name, create multivalue field
                        if(data[fieldName] instanceof Array) {
                            data[fieldName].push(fieldValue);
                        }
                        else {
                            data[fieldName] = [data[fieldName], fieldValue];
                        }
                    }
                    else {
                        data[fieldName] = fieldValue;
                    }
                }
            
            }
            segmentStartPos++;
        }
        return data;
    }
    
    

    function readTags(file, tiffStart, dirStart, strings, bigEnd) {
        var entries = file.getUint16(dirStart, !bigEnd),
            tags = {}, 
            entryOffset, tag,
            i;
            
        for (i=0;i<entries;i++) {
            entryOffset = dirStart + i*12 + 2;
            tag = strings[file.getUint16(entryOffset, !bigEnd)];
            if (!tag && debug) console.log("Unknown tag: " + file.getUint16(entryOffset, !bigEnd));
            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);
        }
        return tags;
    }


    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {
        var type = file.getUint16(entryOffset+2, !bigEnd),
            numValues = file.getUint32(entryOffset+4, !bigEnd),
            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,
            offset,
            vals, val, n,
            numerator, denominator;

        switch (type) {
            case 1: // byte, 8-bit unsigned int
            case 7: // undefined, 8-bit byte, value depending on field
                if (numValues == 1) {
                    return file.getUint8(entryOffset + 8, !bigEnd);
                } else {
                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint8(offset + n);
                    }
                    return vals;
                }

            case 2: // ascii, 8-bit byte
                offset = numValues > 4 ? valueOffset : (entryOffset + 8);
                return getStringFromDB(file, offset, numValues-1);

            case 3: // short, 16 bit int
                if (numValues == 1) {
                    return file.getUint16(entryOffset + 8, !bigEnd);
                } else {
                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);
                    }
                    return vals;
                }

            case 4: // long, 32 bit int
                if (numValues == 1) {
                    return file.getUint32(entryOffset + 8, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);
                    }
                    return vals;
                }

            case 5:    // rational = two long values, first is numerator, second is denominator
                if (numValues == 1) {
                    numerator = file.getUint32(valueOffset, !bigEnd);
                    denominator = file.getUint32(valueOffset+4, !bigEnd);
                    val = new Number(numerator / denominator);
                    val.numerator = numerator;
                    val.denominator = denominator;
                    return val;
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);
                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);
                        vals[n] = new Number(numerator / denominator);
                        vals[n].numerator = numerator;
                        vals[n].denominator = denominator;
                    }
                    return vals;
                }

            case 9: // slong, 32 bit signed int
                if (numValues == 1) {
                    return file.getInt32(entryOffset + 8, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);
                    }
                    return vals;
                }

            case 10: // signed rational, two slongs, first is numerator, second is denominator
                if (numValues == 1) {
                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);
                    }
                    return vals;
                }
        }
    }

    function getStringFromDB(buffer, start, length) {
        var outstr = "";
        for (n = start; n < start+length; n++) {
            outstr += String.fromCharCode(buffer.getUint8(n));
        }
        return outstr;
    }
    
    function readEXIFData(file, start) {
        if (getStringFromDB(file, start, 4) != "Exif") {
            if (debug) console.log("Not valid EXIF data! " + getStringFromDB(file, start, 4));
            return false;
        }

        var bigEnd,
            tags, tag,
            exifData, gpsData,
            tiffOffset = start + 6;

        // test for TIFF validity and endianness
        if (file.getUint16(tiffOffset) == 0x4949) {
            bigEnd = false;
        } else if (file.getUint16(tiffOffset) == 0x4D4D) {
            bigEnd = true;
        } else {
            if (debug) console.log("Not valid TIFF data! (no 0x4949 or 0x4D4D)");
            return false;
        }

        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {
            if (debug) console.log("Not valid TIFF data! (no 0x002A)");
            return false;
        }

        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);

        if (firstIFDOffset < 0x00000008) {
            if (debug) console.log("Not valid TIFF data! (First offset less than 8)", file.getUint32(tiffOffset+4, !bigEnd));
            return false;
        }

        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);

        if (tags.ExifIFDPointer) {
            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);
            for (tag in exifData) {
                switch (tag) {
                    case "LightSource" :
                    case "Flash" :
                    case "MeteringMode" :
                    case "ExposureProgram" :
                    case "SensingMethod" :
                    case "SceneCaptureType" :
                    case "SceneType" :
                    case "CustomRendered" :
                    case "WhiteBalance" : 
                    case "GainControl" : 
                    case "Contrast" :
                    case "Saturation" :
                    case "Sharpness" : 
                    case "SubjectDistanceRange" :
                    case "FileSource" :
                        exifData[tag] = StringValues[tag][exifData[tag]];
                        break;
        
                    case "ExifVersion" :
                    case "FlashpixVersion" :
                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);
                        break;
        
                    case "ComponentsConfiguration" : 
                        exifData[tag] = 
                            StringValues.Components[exifData[tag][0]] +
                            StringValues.Components[exifData[tag][1]] +
                            StringValues.Components[exifData[tag][2]] +
                            StringValues.Components[exifData[tag][3]];
                        break;
                }
                tags[tag] = exifData[tag];
            }
        }

        if (tags.GPSInfoIFDPointer) {
            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);
            for (tag in gpsData) {
                switch (tag) {
                    case "GPSVersionID" : 
                        gpsData[tag] = gpsData[tag][0] +
                            "." + gpsData[tag][1] +
                            "." + gpsData[tag][2] +
                            "." + gpsData[tag][3];
                        break;
                }
                tags[tag] = gpsData[tag];
            }
        }

        return tags;
    }


    function getData(img, callback) {
        if ((img instanceof Image || img instanceof HTMLImageElement) && !img.complete) return false;
        
        if (!imageHasData(img)) {
            getImageData(img, callback);
        } else {
            if (callback) {
                callback.call(img);
            }
        }
        return true;
    }

    function getTag(img, tag) {
        if (!imageHasData(img)) return;
        return img.exifdata[tag];
    }

    function getAllTags(img) {
        if (!imageHasData(img)) return {};
        var a, 
            data = img.exifdata,
            tags = {};
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                tags[a] = data[a];
            }
        }
        return tags;
    }

    function pretty(img) {
        if (!imageHasData(img)) return "";
        var a,
            data = img.exifdata,
            strPretty = "";
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                if (typeof data[a] == "object") {
                    if (data[a] instanceof Number) {
                        strPretty += a + " : " + data[a] + " [" + data[a].numerator + "/" + data[a].denominator + "]\r\n";
                    } else {
                        strPretty += a + " : [" + data[a].length + " values]\r\n";
                    }
                } else {
                    strPretty += a + " : " + data[a] + "\r\n";
                }
            }
        }
        return strPretty;
    }

    function readFromBinaryFile(file) {
        return findEXIFinJPEG(file);
    }

   
    return {
        readFromBinaryFile : readFromBinaryFile,
        pretty : pretty,
        getTag : getTag,
        getAllTags : getAllTags,
        getData : getData,
        getImageData : getImageData,
        
        Tags : ExifTags,
        TiffTags : TiffTags,
        GPSTags : GPSTags,
        StringValues : StringValues
    };

})();

var BinaryFile = function(strData, iDataOffset, iDataLength) {
	var data = strData;
	var dataOffset = iDataOffset || 0;
	var dataLength = 0;

	this.getRawData = function() {
		return data;
	}

	if (typeof strData == "string") {
		dataLength = iDataLength || data.length;

		this.getByteAt = function(iOffset) {
			return data.charCodeAt(iOffset + dataOffset) & 0xFF;
		}
		
		this.getBytesAt = function(iOffset, iLength) {
			var aBytes = [];
			
			for (var i = 0; i < iLength; i++) {
				aBytes[i] = data.charCodeAt((iOffset + i) + dataOffset) & 0xFF
			};
			
			return aBytes;
		}
	} else if (typeof strData == "unknown") {
		dataLength = iDataLength || IEBinary_getLength(data);

		this.getByteAt = function(iOffset) {
			return IEBinary_getByteAt(data, iOffset + dataOffset);
		}

		this.getBytesAt = function(iOffset, iLength) {
			return new VBArray(IEBinary_getBytesAt(data, iOffset + dataOffset, iLength)).toArray();
		}
	}

	this.getLength = function() {
		return dataLength;
	}

	this.getSByteAt = function(iOffset) {
		var iByte = this.getByteAt(iOffset);
		if (iByte > 127)
			return iByte - 256;
		else
			return iByte;
	}

	this.getShortAt = function(iOffset, bBigEndian) {
		var iShort = bBigEndian ? 
			(this.getByteAt(iOffset) << 8) + this.getByteAt(iOffset + 1)
			: (this.getByteAt(iOffset + 1) << 8) + this.getByteAt(iOffset)
		if (iShort < 0) iShort += 65536;
		return iShort;
	}
	this.getSShortAt = function(iOffset, bBigEndian) {
		var iUShort = this.getShortAt(iOffset, bBigEndian);
		if (iUShort > 32767)
			return iUShort - 65536;
		else
			return iUShort;
	}
	this.getLongAt = function(iOffset, bBigEndian) {
		var iByte1 = this.getByteAt(iOffset),
			iByte2 = this.getByteAt(iOffset + 1),
			iByte3 = this.getByteAt(iOffset + 2),
			iByte4 = this.getByteAt(iOffset + 3);

		var iLong = bBigEndian ? 
			(((((iByte1 << 8) + iByte2) << 8) + iByte3) << 8) + iByte4
			: (((((iByte4 << 8) + iByte3) << 8) + iByte2) << 8) + iByte1;
		if (iLong < 0) iLong += 4294967296;
		return iLong;
	}
	this.getSLongAt = function(iOffset, bBigEndian) {
		var iULong = this.getLongAt(iOffset, bBigEndian);
		if (iULong > 2147483647)
			return iULong - 4294967296;
		else
			return iULong;
	}

	this.getStringAt = function(iOffset, iLength) {
		var aStr = [];
		
		var aBytes = this.getBytesAt(iOffset, iLength);
		for (var j=0; j < iLength; j++) {
			aStr[j] = String.fromCharCode(aBytes[j]);
		}
		return aStr.join("");
	}
	
	this.getCharAt = function(iOffset) {
		return String.fromCharCode(this.getByteAt(iOffset));
	}
	this.toBase64 = function() {
		return window.btoa(data);
	}
	this.fromBase64 = function(strBase64) {
		data = window.atob(strBase64);
	}
}

jQuery.noConflict();
(function( $ ) {

  $(document).ready(function( ){ 
    $('.flickr-gallery-bottom-buttons').hide();
    $(window).scroll(function() {
        if ($(this).scrollTop() >= 300) {
            $('.flickr-gallery-bottom-buttons').show();
        }
    });

    if ($('#ajaxafgflickr').length > 0){
        var url = "http://ajax.aspnetcdn.com/ajax/jquery.validate/1.12.0/jquery.validate.min.js";
        $.getScript( url, function() {
            setupValidation();
        });
    }
               
    function setupValidation (){
        var patterns = {
            letters: /^[\sa-z'-]+$/i,
            ukpostcode: /^([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9]?[A-Za-z])))) {0,1}[0-9][A-Za-z]{2})$/,
            telephone: /^([\+(][+0-9()]{1,5}([ )\-])?)?([\(]{1}[0-9]{3}[\)])?([0-9 \-]{1,256}([ \s\-])?)((x|ext|extension)?[0-9]{1,4}?)$/i,
            mobile: /^((0|\+44|00\d{2})7(5|6|7|8|9){1}\d{2}\s?\d{6})$/,
            decimal: /^\d*(\.[0-9]{1,2})?$/i,
            mastercard: /^5[1-5]\d{14}$/,
            visa: /(^4\d{12}$)|(^4[0-8]\d{14}$)|(^(49)[^013]\d{13}$)|(^(49030)[0-1]\d{10}$)|(^(49033)[0-4]\d{10}$)|(^(49110)[^12]\d{10}$)|(^(49117)[0-3]\d{10}$)|(^(49118)[^0-2]\d{10}$)|(^(493)[^6]\d{12}$)/,
            maestro: /(^(5[0678])\d{11,18}$)|(^(6[^05])\d{11,18}$)|(^(601)[^1]\d{9,16}$)|(^(6011)\d{9,11}$)|(^(6011)\d{13,16}$)|(^(65)\d{11,13}$)|(^(65)\d{15,18}$)|(^(49030)[2-9](\d{10}$|\d{12,13}$))|(^(49033)[5-9](\d{10}$|\d{12,13}$))|(^(49110)[1-2](\d{10}$|\d{12,13}$))|(^(49117)[4-9](\d{10}$|\d{12,13}$))|(^(49118)[0-2](\d{10}$|\d{12,13}$))|(^(4936)(\d{12}$|\d{14,15}$))/,
            securitycode: /[0-9]{3}/,
            alphanums: /^[a-zA-Z0-9]*$/,
            postcode: /^[ a-zA-Z0-9]*$/,
            words: /^[ a-zA-Z0-9'-]*$/,
            groupid: /^[A-Za-z]{2}[0-9]{4}$/,
            url: /^[0-9a-z-]+$/i,
            emails: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/,
            addressline: /^[A-Za-z0-9\-_’'‘ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]+[A-Za-z0-9\-_ ’'‘ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]*[A-Za-z]+[A-Za-z0-9\-_ ’'‘ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]*$/,
            // As addressline but accepts full stop as well
            addressline1: /^[A-Za-z0-9\-_’'‘.ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]+[A-Za-z0-9\-_ ’'‘.ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]*[A-Za-z]+[A-Za-z0-9\-_ ’'‘.ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]*$/,
            firstname: /^[A-Za-z\-_’ '‘.ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]+[A-Za-z\-_’ '‘.ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]*[A-Za-z]+[A-Za-z\-_’ '‘.ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]*$/,
            surname: /^[A-Za-z\-_’ '‘ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]+[A-Za-z\-_’ '‘ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]*[A-Za-z]+[A-Za-z\-_’ '‘ÆÐ??????Œ?Þ??æð??????œ??ßþ??A?ÇÐ?EHI?LØOS?T?TUUY??a?çd?ehi?løos?t?tuuy??ÁÀÂÄAAAÃÅ?AÆ???CCCCÇD?Ð?ÐÉÈEÊËEEEE????GGGGG?áàâäaaaãå?aæ???ccccçd?d?ðéèeêëeeee????ggggg?H?HIÍÌIÎÏIIIII??JK?LLLL?'NNN¨NÑN?ÓÒÔÖOOOÕO?Ø?OŒh?hiíìiîïiiiii??jk??llll??nn¨nñn?óòôöoooõo?ø?oœRRRSSŠS???TT?TÞÚÙÛÜUUUUUUU?U??W??Ý?YŸ???ZZŽ?rrr?ssšs??ßtt?tþúùûüuuuuuuu?u??w??ý?yÿ???zzž?]*$/
        }
		// validate the form when it is submitted
		$.validator.addMethod("CheckDates", function(i,element) {
			return IsValidDate(element);
		}, "Please enter a correct date");
        $.validator.addMethod("regexp", function(value, element, param) { 
            return this.optional(element) || !param.test(value); 
        });         
        $.validator.addMethod('lettersonly', function(value, element) {
            return this.optional(element) || patterns.letters.test(value);
        });
        $.validator.addMethod('ukpostcode', function(value) {
            return patterns.ukpostcode.test(value);
        });
        $.validator.addMethod('addressline', function(value, element) {
            return (value == '') || patterns.addressline.test(value);
        });
        $.validator.addMethod('addressline1', function(value, element) {
            return (value == '') || patterns.addressline1.test(value);
        });
        $.validator.addMethod('firstname', function(value, element) {
            return (value == '') || patterns.firstname.test(value);
        });
        $.validator.addMethod('surname', function(value, element) {
            return (value == '') || patterns.surname.test(value);
        });
        $.validator.addMethod('telephone', function(value, element) {
            if ($(element).val() != '') {
                return patterns.telephone.test(value);
            } else {
                return true;
            }
        });
        $.validator.addMethod("valueNotEquals", function(value, element, arg){
            return arg != value;
        }, "Please select a value");        
        $.validator.addMethod('postcode', function(value) {
            return patterns.postcode.test(value);
        });
		$.validator.addClassRules({
			small: { required:true, CheckDates:true}
		});
		$("#ajaxafgflickr").validate({
			debug: false,
			errorElement: "em",
			errorContainer: $(".form-item em"),			
			errorPlacement: function(error, element) {
				element.parents(".form-item").find("em").html(error);
			},
			focusCleanup: false,
			focusInvalid: true,		
			rules: {
				afgfirstname: {
                    required: true,
                    minlength: 2,
                    firstname: true
                },
				afglastname: {
                    required: true,
                    minlength: 2,
                    surname: true
                },                
                afgimagetitle:{
                	maxlength: 80
                },
                afgimagestory:{
                	maxlength: 200
                },
				afgyouremail: {
					required:true,
					email: true,
				},
                afgphonenumber:{
                    telephone: true
                },
				afgconsent: "required",
				afgtsandcs: "required",				
			},
			messages: {
				afgfirstname: {
                  required: "Please enter your first name.",
                  firstname: "Please enter a valid first name.",
                  minlength: "Please enter a valid first name."
                },
				afglastname: {
                  required: "Please enter your last name.",
                  firstname: "Please enter a valid last name.",
                  minlength: "Please enter a valid last name."
                },
				afgyouremail: {
                  required: "Please enter your email address.",
                  email: "Please enter a valid email address."                
                },
				afgphonenumber: {
                  telephone: "Please enter a valid phone number."                
                },                
				afgtsandcs: "Please agree to allow this image to be used on the website",                
				afgtsandcs: "Please agree to understand and accept the terms and conditions"
			},
            submitHandler: function(form){
                //$('#ajaxafgflickr button[type=submit]').attr('disabled', 'disabled');
                form.submit();
            }
		});
		$("#ajaxafgflickr").removeAttr("novalidate");
	}
    $('#ajaxbhfflickr .error').hide();  

	$('.fileButton').click(function() {
	    $('input[type=file]', '.file-upload').click();
	});
    
    var uploadingtext='Uploading in progress...'; // text for uploading
    /// load about
    $('.cropimage').hide();
    $("#yourfile").on('change',function(evt){
        $("#yourfile").css("color",'#000000');
		if($("#yourfile").val()!=''){
            var file = evt.target.files[0];
         
            var result = '';
            // if the file is not an image, continue
            if (!file.type.match('image.*')) {
                $('.noimg-loaded').show();
                $('.noimg-loaded p.error').html('Please upload only gif or jpeg files');            
            }
            else{
                if (window.File && window.FileReader && window.FileList && window.Blob) {
                    // prepare HTML5 FileReader
                    var oFReader = new FileReader();
                    oFReader.readAsDataURL(file);
                    oFReader.onload = function (oFREvent) {
                        //var data = image_result.replace("data:image/jpeg;base64,", "");
                        jQuery('.cropimage').attr('src', oFREvent.target.result).fadeIn();
                        var bin = window.atob(oFREvent.target.result.split(',')[1]);
                        var bfile = new BinaryFile(bin);
                        var exif = EXIF.readFromBinaryFile(bfile);

                        switch(exif.Orientation){
                           case 8:
                               jQuery('.cropimage').rotate(90*Math.PI/180);
                               break;
                           case 3:
                               jQuery('.cropimage').rotate(180*Math.PI/180);
                               break;
                           case 6:
                               jQuery('.cropimage').rotate(-90*Math.PI/180);
                               break;
                        }
                        
                        jQuery('.noimg-loaded', window.parent.document).hide();
                        // save the image source
                        jQuery('.img_src', window.parent.document).val(oFREvent.target.result);
                        // load to preview image
                        img_id = 'big';
                        
                        jQuery('.img-loaded', window.parent.document).show();               
                        jQuery('#ajaxafgflickr .x').val(0);
                        jQuery('#ajaxafgflickr .y').val(0);
                        jQuery('#ajaxafgflickr .w').val(530 * 3);
                        jQuery('#ajaxafgflickr .h').val(530 * 3);
                        
                        if (jQuery('.img-loaded').width() < 530){
                            //var scale = ($('.img-loaded').width() / 530) * 100;
                            var image = jQuery('.cropimage'),
                                cropwidth = jQuery('.img-loaded').width(),
                                cropheight = jQuery('.img-loaded').width(),
                                results = jQuery('#ajaxafgflickr'),
                                x       = jQuery('.x', results),
                                y       = jQuery('.y', results),
                                w       = jQuery('.w', results),
                                h       = jQuery('.h', results);
                            image.cropbox( { width: cropwidth, height: cropheight, showControls: 'always' } )
                                .on('cropbox', function( event, results, img ) {
                                  jQuery('#ajaxafgflickr .x').val( results.cropX );
                                  jQuery('#ajaxafgflickr .y').val( results.cropY );              
                                  jQuery('#ajaxafgflickr .w').val( results.cropW );
                                  jQuery('#ajaxafgflickr .h').val( results.cropH );
                                });
                        }
                        else{
                            var image = jQuery('.cropimage'),
                                cropwidth = image.attr('cropwidth'),
                                cropheight = image.attr('cropheight'),
                                results = jQuery('#ajaxafgflickr'),
                                x       = jQuery('.x', results),
                                y       = jQuery('.y', results),
                                w       = jQuery('.w', results),
                                h       = jQuery('.h', results);
                            image.cropbox( { width: cropwidth, height: cropheight, showControls: 'always' } )
                                .on('cropbox', function( event, results, img ) {
                                  jQuery('#ajaxafgflickr .x').val( results.cropX );
                                  jQuery('#ajaxafgflickr .y').val( results.cropY );              
                                  jQuery('#ajaxafgflickr .w').val( results.cropW );
                                  jQuery('#ajaxafgflickr .h').val( results.cropH );
                                });
                        }                         
                         
                    };  
                }
                else{
                    var loadingGif = '/wp-content/themes/twentythirteen-child/images/UNICEF_loading.gif';
                    $('.uploaderForm').append('<div class="loadingGif"><img src="'+ loadingGif +'" alt="Loading image" /></div> ');
                    var $fval = $("#yourfile").val().replace(/(c:\\)*fakepath\\/i, '');
                    $fval = $fval.replace(/(\\\/)*fakepath\\\//i, '');
                    $('#uploadFile').val($fval);
                    
                    $('#notice').text(uploadingtext).fadeIn();
                    $("#upload_big").submit();
                }
			}
		}
		else {
			$('.notice').hide();
		}
	}); 
	$( ".filter-sport").on('change', function() {
        var durl = window.location.href;
        var ordurl = durl;
        durl = updateURLParameter(durl, 'sport', $('.filter-sport option:selected').val());   
        if (ordurl != durl){
            window.location.href = durl;
        }
    }); 
    $( ".filter-category" ).on('change', function() {
        var durl = window.location.href;
        var ordurl = durl;
        durl = updateURLParameter(durl, 'category', $('.filter-category option:selected').val());   
        if (ordurl != durl){
            window.location.href = durl;
        }
    });    
    if ($('.img-loaded.show').length > 0){
        // load to preview image
        img_id = 'big';
        
        $('.img-loaded').show();
        if ($('.img-loaded').width() < 530){
            //var scale = ($('.img-loaded').width() / 530) * 100;
            var image = $('.cropimage'),
                cropwidth = $('.img-loaded').width(),
                cropheight = $('.img-loaded').width(),
                results = $('#ajaxafgflickr'),
                x       = $('.x', results),
                y       = $('.y', results),
                w       = $('.w', results),
                h       = $('.h', results);
            image.cropbox( { width: cropwidth, height: cropheight, showControls: 'always' } )
                .on('cropbox', function( event, results, img ) {
                  $('#ajaxafgflickr .x').val( results.cropX );
                  $('#ajaxafgflickr .y').val( results.cropY );              
                  $('#ajaxafgflickr .w').val( results.cropW );
                  $('#ajaxafgflickr .h').val( results.cropH );
                });
        }
        else{
            var image = $('.cropimage'),
                cropwidth = image.attr('cropwidth'),
                cropheight = image.attr('cropheight'),
                results = $('#ajaxafgflickr'),
                x       = $('.x', results),
                y       = $('.y', results),
                w       = $('.w', results),
                h       = $('.h', results);
            image.cropbox( { width: cropwidth, height: cropheight, showControls: 'always' } )
                .on('cropbox', function( event, results, img ) {
                  $('#ajaxafgflickr .x').val( results.cropX );
                  $('#ajaxafgflickr .y').val( results.cropY );              
                  $('#ajaxafgflickr .w').val( results.cropW );
                  $('#ajaxafgflickr .h').val( results.cropH );
                });
        }
    }
    $("form.uploaderForm").submit(function() {            
        // get the sended form
        var fname = $(this).attr('name');
        var img_id='';        
        // check if there is a thumbnail selection
        if(fname == 'upload_thumb'){
            if($('#x').val() =="" || $('#y').val() =="" || $('#w').val() <="0" || $('#h').val() <="0"){
                $('#notice2').text(alertText).fadeIn();
                return false;
            }
        }
        $('#upload_target').on("load", function(){
            // get content from hidden iframe

        });
    });


    $('a').each(function() {		
        if(window.location.hostname && window.location.hostname !== this.hostname) {
            $(this).attr('target','_blank');
        }
    });     
    var filetypes = /\.(zip|exe|dmg|pdf|doc.*|xls.*|ppt.*|mp3|txt|rar|wma|mov|avi|wmv|flv|wav)$/i;
    var baseHref = '';
    if ($('base').attr('href') != undefined) baseHref = $('base').attr('href');
    if (typeof(_gaq) !== 'undefined') {
        $('a').on('click', function(event) {
          var el = $(this);
          var track = true;
          var href = (typeof(el.attr('href')) != 'undefined' ) ? el.attr('href') :"";
          var isThisDomain = true;
          if (href.match(/^https?\:/i)) {
            var domain = href.match(/http[s]?\:\/\/(.*?)[\/$]/)[1]
            var isThisDomain = (window.location.hostname && window.location.hostname == domain) ? true : false;
          } 
          if (!href.match(/^javascript:/i)) {
            var elEv = []; elEv.value=0, elEv.non_i=false;
            if (href.match(/^mailto\:/i)) {
              elEv.category = "email";
              elEv.action = "click";
              elEv.label = href.replace(/^mailto\:/i, '');
              elEv.loc = href;
            }
            else if (href.match(filetypes)) {
              var extension = (/[.]/.exec(href)) ? /[^.]+$/.exec(href) : undefined;
              elEv.category = "download";
              elEv.action = "click-" + extension[0];
              elEv.label = href.replace(/ /g,"-");
              elEv.loc = baseHref + href;
            }
            else if (href.match(/^https?\:/i) && !isThisDomain) {
              elEv.category = "external";
              elEv.action = "click";
              elEv.label = href.replace(/^https?\:\/\//i, '');
              elEv.non_i = true;
              elEv.loc = href;
            }
            else if (href.match(/^tel\:/i)) {
              elEv.category = "telephone";
              elEv.action = "click";
              elEv.label = href.replace(/^tel\:/i, '');
              elEv.loc = href;
            }
            else track = false;
     
            if (track) {
              _gaq.push(['_trackEvent', elEv.category.toLowerCase(), elEv.action.toLowerCase(), elEv.label.toLowerCase(), elEv.value, elEv.non_i]);
              if ( el.attr('target') == undefined || el.attr('target').toLowerCase() != '_blank') {
                setTimeout(function() { location.href = elEv.loc; }, 400);
                return false;
              }
            }
          }
        });
    }
    
});
})(jQuery);
